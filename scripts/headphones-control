#!/bin/sh

##@ param Message
error () { notify "headphones-control" "Error: $1"; exit 1; }

[ -n "${XDG_STATE_HOME}" ] || error "XDG_STATE_HOME is undefined"
indexfile=${XDG_STATE_HOME}/dotfiles/headphones-control-index
mkdir --parents "${XDG_STATE_HOME}/dotfiles"
[ -f "${indexfile}" ] || echo 1 > "${indexfile}"

##@ param Device address
##@ desc stdout: "connect" | "disconnect"
connection_status () {
    if bluetoothctl devices Connected | grep --quiet --fixed-strings "$1"; then
        echo connect
    else
        echo disconnect
    fi
}

##@ param "connect" | "disconnect"
##@ param Device address
connect_or_disconnect () {
    [ -n "${DISPLAY}" ] && notification=$(notify-send --print-id "Attempting to ${1}...")
    bluetoothctl --timeout=3 -- "$1" "$2"
    [ -n "${DISPLAY}" ] || return
    if [ "$1" = "$(connection_status "$2")" ]; then
        notify-send --expire-time=2000 --replace-id "${notification}" "Successfully ${1}ed"
    else
        error "Unable to $1"
    fi
}

##@ param Index
get_info () {
    bluetoothctl devices Paired | sed --quiet "${1}p"
}

##@ param Index
get_address () {
    get_info "$1" | cut --delimiter=' ' --fields=2
}

##@ param Index
get_name () {
    get_info "$1" | cut --delimiter=' ' --fields=3-
}

##@ param Index
rotate_index () {
    case $1 in
        "$(bluetoothctl devices Paired | wc --lines)")
            echo 1;;
        *)
            echo $(($1 + 1));;
    esac
}

##@ param New index
update_index () {
    echo "$1" > "${indexfile}"
    [ -n "${DISPLAY}" ] || return
    notify-send --replace-id=999999999 --expire-time=2000 "headphones-control" "$(get_name "$1")"
}

index=$(cat "${indexfile}")

case $1 in
    connect|disconnect)
        connect_or_disconnect "$1" "$(get_address "${index}")";;
    rotate)
        update_index "$(rotate_index "${index}")";;
    *)
        error "Invalid argument";;
esac

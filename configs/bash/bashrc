#!/bin/bash

# Set dotfiles repo location
export MY_DOTFILES_REPO=${HOME}/misc/dotfiles

# Stop here if the dotfiles repo can not be found
[ ! -d "${MY_DOTFILES_REPO}" ] && echo "dotfiles repo not found" && return

PS1='$ ' # Primary prompt
PS2='> ' # Continuation prompt

# Default arguments
alias cp='cp --verbose --interactive'
alias mv='mv --verbose --interactive'
alias rm='rm --verbose --interactive=once'
alias rg='rg --smart-case'
alias bc='bc --quiet --standard'
alias pwd='pwd -P'
alias ghci='ghci -v0'
alias grep='grep --ignore-case --color=auto'

# Convenience
alias q='exit'
alias vi='nvim'
alias vis='nvim -S'
alias md='mkdir --verbose --parents'
alias rd='rmdir --verbose'
alias ls='eza --git --no-permissions --octal-permissions --group-directories-first'
alias py='python -i "$MY_DOTFILES_REPO/configs/python/startup.py"'
alias ns='newsboat'
alias jr='journalctl --pager-end'
alias calendar='cal --monday $(date +%Y)'
alias memcheck='valgrind --leak-check=full --show-leak-kinds=all --show-error-list=yes'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'

# XDG base directories
export XDG_CONFIG_HOME=${HOME}/.config
export XDG_CACHE_HOME=${HOME}/.cache
export XDG_DATA_HOME=${HOME}/.local/share
export XDG_STATE_HOME=${HOME}/.local/state

# Add scripts and local binaries to $PATH
export PATH=${MY_DOTFILES_REPO}/scripts:${HOME}/.local/bin:${PATH}

# Default programs
export EDITOR=/usr/bin/nvim
export SUDO_EDITOR=/usr/bin/vim
export BROWSER=/usr/bin/qutebrowser

# Miscellaneous configuration
export HISTSIZE=-1
export HISTIGNORE=q:exit
export HISTCONTROL=ignoredups
export LESSHISTFILE=/dev/null
export SQLITE_HISTORY=/dev/null
export WATCH_INTERVAL=0.5
export MANROFFOPT="-P -c"
export MANPAGER="less --color=d+r --color=u+b"
export LESS="--incsearch --ignore-case --jump-target=.3 --chop-long-lines --clear-screen --use-color --RAW-CONTROL-CHARS"
export FZF_DEFAULT_OPTS_FILE=${MY_DOTFILES_REPO}/configs/fzf/fzfrc

# Tell programs not to pollute $HOME
export HISTFILE=${XDG_STATE_HOME}/bash/history
export XAUTHORITY=${XDG_RUNTIME_DIR}/Xauthority
export WINEPREFIX=${XDG_DATA_HOME}/wineprefixes/default
export CARGO_HOME=${XDG_DATA_HOME}/cargo
export RUSTUP_HOME=${XDG_DATA_HOME}/rustup
export GHCUP_INSTALL_BASE_PREFIX=${XDG_DATA_HOME}
export GHCUP_USE_XDG_DIRS=yes
export CUDA_CACHE_PATH=${XDG_CACHE_HOME}/nv
export INPUTRC=${MY_DOTFILES_REPO}/configs/readline/inputrc
export XINITRC=${MY_DOTFILES_REPO}/configs/x/xinitrc

GPG_TTY=$(tty)
export GPG_TTY

# Make and change directory (mkdir + cd)
mc () {
    [ $# = 1 ] || exit 1
    [ ! -d "$1" ] && mkdir --parents -- "$1" || echo "Already exists: $1"
    builtin cd -- "$1" && echo "Moved to $(pwd)"
}

reboot () {
    prompt-yesno "Reboot?" && command reboot
}

# Mimic `command` completion for `on-compilation-trigger`
command -v _command >/dev/null && complete -F _command on-compilation-trigger

_my_shell_set_line () {
    READLINE_LINE=$1; READLINE_POINT=${#1}
}

_my_shell_fzf () {
    fzf --height=~60% --layout=reverse --info=inline "$@"
}

_my_shell_history () {
    if _my_line=$(builtin history | cut --characters=8- | _my_shell_fzf --tac --no-sort); then
        _my_shell_set_line "${_my_line}"
    fi
}

_my_shell_find_file () {
    if _my_file=$(_my_shell_fzf --walker=file,dir,hidden --walker-root="$1" --scheme=path); then
        _my_shell_set_line "${READLINE_LINE}$(printf %q "${_my_file}") "
    fi
}

_my_shell_cd () {
    if _my_dir=$(_my_shell_fzf --walker=dir,hidden --walker-root="$1" --scheme=path); then
        builtin cd -- "${_my_dir}" || return
    fi
}

# Custom fzf shell integration
if command -v fzf >/dev/null; then
    bind -m vi-insert -x '"\C-r": _my_shell_history'
    bind -m vi-insert -x '"\C-f": _my_shell_find_file .'
    bind -m vi-insert -x '"\C-g": _my_shell_find_file /'
    bind -m vi-insert -x '"\C-e": _my_shell_cd .'
    bind -m vi-insert -x '"\C-a": _my_shell_cd /'
fi
